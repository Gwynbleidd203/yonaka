@import "node_modules/normalize.css/normalize.css";
html {
  color-scheme: dark light;
}

@media (prefers-color-scheme: light) {
  :root {
    --text: #060514; /* Changed to a dark color for better contrast with white */
    --background: #ffffff; /* Changed to white */
    --primary: #413e9f;
    --secondary: #928fdb;
    --accent: #716ed8;
    --blend-text-color: #FFF;
    --blend-back-color: #000;
    --blend-highlight-color: #000;
  }
}
[data-theme=light] {
  --text: #060514; /* Changed to a dark color for better contrast with white */
  --background: #ffffff; /* Changed to white */
  --primary: #413e9f;
  --secondary: #12103c;
  --accent: #4f4bce;
  --blend-text-color: #FFF;
  --blend-back-color: #000;
  --blend-highlight-color: #000;
}

body {
  --font-size: var(--md);
  font-size: var(--font-size);
  font-family: var(--font-family);
  font-weight: var(--font-weight);
  line-height: var(--line-height);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: antialiased;
}

:where(h1) {
  --text-color: var(--accent);
  color: var(--text-color);
}

h1, h2, h3,
h4, h5, h6 {
  --spacing: var(--lg);
  margin-bottom: var(--spacing);
}

p {
  --text-color: var(--content-text);
  --font-weight: 500;
  color: var(--text-color);
  font-weight: var(--font-weight);
}
p:not(:last-child) {
  margin-bottom: var(--lg);
}

code {
  --font-family: monospace;
  --bg: var(--foreground-secondary)
  font-family: var(--font-family);
  background-color: var(--bg);
}

:is(h1, h2, h3, h4, h5, h6, p).muted {
  color: var(--muted-text);
}
:is(h1, h2, h3, h4, h5, h6, p).foreground {
  color: var(--foreground-text);
}

:where(:root) {
  --roundness: auto;
  --spacing: .8rem;
  --spacing-y: auto;
  --spacing-x: auto;
  --jump: .4rem;
  --theme: dark;
  --width: unset;
  --height: unset;
  --xs: .4rem;
  --sm: .8rem;
  --md: 1.6rem;
  --lg: 3.2rem;
  --xl: 6.4rem;
  --hg: 12.8rem;
  --text: #e4e3f7;
  --background: #060514;
  --primary: #413E9F;
  --secondary: #12103c;
  --accent: #4f4bce;
  --destructive: #772626;
  --blend-text-color: #000;
  --blend-back-color: #FFF;
  --blend-highlight-color: #FFF;
  --content-text: color-mix(in oklab, var(--text), var(--blend-text-color) 20%);
  --muted-text: color-mix(in oklab, var(--text), var(--blend-text-color) 35%);
  --foreground-text: color-mix(in oklab, var(--text), var(--blend-text-color) 35%);
  --foreground-primary: color-mix(in oklab, var(--primary), var(--blend-text-color) 35%);
  --foreground-background: color-mix(in oklab, var(--background), var(--blend-back-color) 15%);
  --foreground-secondary: color-mix(in oklab, var(--secondary), var(--blend-back-color) 30%);
  --foreground-accent: color-mix(in oklab, var(--accent), var(--blend-text-color) 35%);
  --foreground-destructive: color-mix(in oklab, var(--destructive), var(--blend-back-color) 15%);
  --bp-sm: 40em;
  --bp-md: 48em;
  --bp-lg: 64em;
  --bp-hg: 80em;
  --h-full: 100%;
  --h-half: 50%;
  --h-third: 33.3333%
  --h-quarter: 25%;
  --h-screen: 100vh;
  --h-half-screen: 50vh;
  --h-third-screen: 33.3333vh;
  --h-quarter-screen: 25vh;
  --w-full: 100%;
  --w-half: 50%;
  --w-third: 33.3333%
  --w-quarter: 25%;
  --w-screen: 100vw;
  --w-half-screen: 50vw;
  --w-third-screen: 33.3333vw;
  --w-quarter-screen: 25vw;
  --grid-cols: auto-fill;
  --grid-rows: auto;
  --grid-item-width: 10rem;
  --grid-justify-items: start;
  --padding: var(--sm);
  --roundness: var(--xs);
  --font-family: system-ui, "Inter", "Roboto";
  --font-weight: 400;
  --font-size: 1.6rem;
  --line-height: 1.15;
  --transition: .4s ease;
  --bg: inherit;
  --txt-color: inherit;
}

body {
  --bg: var(--background);
  --spacing: var(--md);
  display: grid;
  place-items: center;
  min-height: 100vh;
  gap: var(--xs);
  background-color: var(--bg);
}
body :where(nav, header, footer):not(.hero) {
  --bg: var(--background);
  background-color: var(--bg);
}
body :where(main > section, div):not(.hero, .wrapper) {
  --bg: var(--secondary);
  background-color: var(--bg);
  margin-block: var(--spacing);
  padding: var(--spacing);
}
body :where(main > section > div):not(.hero, .wrapper) {
  --spacing: var(--md);
  margin-block: var(--spacing);
}
body * :where(:not(h1, p)) {
  --txt: var(--text);
  color: var(--txt);
  border-radius: var(--roundness);
}

:where(a:not([role=img])) {
  --txt-color: var(--accent);
  width: fit-content;
  height: fit-content;
}
:where(a:not([role=img])):visited, :where(a:not([role=img])):link {
  color: var(--txt-color);
}

*,
*::before,
*::after {
  box-sizing: inherit;
  padding: 0;
  margin: 0;
  text-decoration: none;
}

html {
  font-size: 62.5%;
  line-height: 1.15;
  scroll-behavior: smooth;
}

body {
  box-sizing: border-box;
}

img,
video,
svg {
  width: 100%;
  height: auto;
}

a {
  text-decoration: none;
}

ul,
ol {
  list-style: none;
}

details {
  --spacing: var(--md)
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing);
}
details::marker {
  display: none;
}
details summary {
  width: 100%;
}
details summary::marker {
  appearance: none;
  display: none;
  visibility: hidden;
  opacity: 0;
}

::marker {
  appearance: none;
  display: none;
  visibility: hidden;
  list-style-type: none;
}

button {
  --width: 16em;
  --spacing: var(--md) var(--lg);
  --roundness: .6vmin;
  text-align: center;
  cursor: pointer;
  text-transform: uppercase;
  border: none;
  padding: var(--md) var(--lg);
  border-radius: var(--roundness);
  transition: background-color, transform var(--transition);
}
button:hover:not(.disabled) {
  transform: translateY(2%);
}
button:active:not(.disabled) {
  transform: translateY(6%);
  filter: brightness(115%);
}
button.cta {
  --bg: var(--accent);
  background-color: var(--bg);
  border: 0.2rem var(--accent) solid;
}
button.cta:hover {
  background-color: color-mix(in oklab, var(--bg), white 20%);
}
button.cta:active {
  background-color: color-mix(in oklab, var(--bg), white 10%);
}
button.ghost {
  --bg: transparent;
  background-color: var(--bg);
  border: 0.2rem solid var(--accent);
  transition: transform var(--transition);
}
button.destructive {
  --bg: var(--destructive);
  background-color: var(--bg);
}
button.disabled {
  cursor: not-allowed;
  opacity: 0.8;
}

article {
  --aspect: 1.5 / 1.85;
  --bg: var(--primary);
  background-color: var(--bg);
  width: calc(2vmin + 15vw);
  aspect-ratio: var(--aspect);
  text-align: center;
  display: grid;
  place-items: center;
}
article * > img:first-child {
  align-self: self-start;
  width: 100%;
  object-fit: cover;
  object-position: top;
}

form:invalid button[type=submit] {
  pointer-events: none;
  opacity: 60%;
}

input, label {
  cursor: pointer;
  transition: background-color var(--transition);
}

label {
  --spacing-y: var(--xs);
  --spacing-x: var(--md);
  width: fit-content;
}
label:has(> input[type=file]) {
  font-weight: 600;
  vertical-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 0.1rem dashed var(--text);
  width: 100%;
  height: 20vh;
  padding: var(--spacing-y) var(--spacing-x);
  text-align: center;
  transition: background-color 0.4s ease-in;
}
label:has(> input[type=file]):hover {
  background-color: var(--accent);
}
label:has(> input[type=color]) {
  display: flex;
  align-items: center;
}

input {
  --roundness: .24vmin;
  --bg: var(--foreground-primary);
  --font-size: 1.50rem;
  font-size: var(--font-size);
  border: 0.2rem solid var(--accent);
  background-color: var(--bg);
  border-radius: var(--roundness);
  padding: var(--spacing);
}
input::placeholder {
  --text-color: var(--muted-text);
  color: var(--text-color);
}
input :is([type=color], [type=date], [type=radio]) {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
}
input[type=radio] {
  accent-color: var(--accent);
}
input[type=file] {
  visibility: hidden;
  width: 0;
  height: 0;
}
input[type=color] {
  --width: 2.4rem;
  border: none;
  width: var(--width);
  border-radius: var(--roundness);
  background-color: transparent;
  overflow: hidden;
}
input[type=color]::-webkit-color-swatch {
  border-radius: var(--roundness);
  overflow: hidden;
  border: none;
}
input[type=color]:active::-webkit-color-swatch, input[type=color]:focus::-webkit-color-swatch {
  border: 0.1rem var(--text) solid;
}
input[type=date] {
  --bg: var(--primary);
  --text-color: var(--text);
  display: inline-flex;
  align-items: center;
  text-align: center;
  vertical-align: center;
  background-color: var(--bg);
  color: var(--text-color);
  border: none;
  padding: 0.8vmin;
  border-radius: var(--roundness);
  font-family: var(--font-family);
  font-weight: 500;
  letter-spacing: 0.2ch;
}
input[type=date]::-webkit-calendar-picker-indicator {
  background-color: var(--secondary);
  padding: 0.6vmin 0.8vmin;
  border-radius: var(--roundness);
  align-self: center;
  margin-top: 2.4%;
  cursor: pointer;
}
input[type=radio] {
  scroll-padding-inline: 10;
}

.logo {
  --roundness: 50%;
  border-radius: var(--roundness);
  width: 8vmin;
  aspect-ratio: 1/1;
  object-fit: cover;
  object-position: center;
}

video {
  aspect-ratio: 16/9;
}

/* SWITCH COMPONENT */
/* Default Styling */
label:has(input[type=checkbox][role=switch],
input[type=checkbox][role=switch]) {
  --switch-w: 4.4em;
  --switch-h: 2.4em;
  --switch-round: 100vmax;
  --switch-default-bg: var(--muted-secondary);
  --switch-focus-outline: var();
  --switch-color: var(--muted-secondary);
  /* GLOBAL */
  --spacing: var(--md);
  margin: var(--spacing);
}

/* Hiding it to achieve the toggle effect */
input[type=checkbox][role=switch] {
  opacity: 0;
}

/* Common styling between switches */
label:has(input[type=checkbox][role=switch]) {
  width: var(--switch-w);
}

/* Default Switch */
label:has(input[type=checkbox][role=switch]:not(:is(.squished, .squared))) {
  width: var(--switch-w);
  height: var(--switch-h);
  border-radius: var(--switch-round);
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--foreground-secondary);
  transition: background-color 0.8s ease-in-out;
}
label:has(input[type=checkbox][role=switch]:not(:is(.squished, .squared)))::after {
  content: "";
  background-color: var(--text);
  aspect-ratio: 1/1;
  height: 80%;
  position: absolute;
  top: 10%;
  left: 5%;
  border-radius: 50%;
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}

label:has(input[type=checkbox][role=switch]:focus) {
  outline: var(--accent) 0.2rem solid;
  outline-offset: 0.18rem;
}

/* Change Switch background when checked */
label:has(input[role=switch][type=checkbox]:checked:not(:is(.squished, .squared))) {
  background-color: var(--primary);
}
label:has(input[role=switch][type=checkbox]:checked:not(:is(.squished, .squared)))::after {
  transform: translateX(100%);
}

/* SWITCH VARIATIONS */
/* Squished Variation */
label:has(input[type=checkbox][role=switch].squished) {
  --switch-h: 1em;
  height: var(--switch-h);
  width: var(--switch-w);
  border-radius: var(--switch-round);
  background-color: var(--foreground-secondary);
  position: relative;
}
label:has(input[type=checkbox][role=switch].squished)::after {
  content: "";
  background-color: var(--text);
  height: 160%;
  aspect-ratio: 1/1;
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
  border-radius: inherit;
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}

/* Change Switch background when checked */
label:has(input[role=switch][type=checkbox].squished:checked) {
  background-color: var(--primary);
}
label:has(input[role=switch][type=checkbox].squished:checked)::after {
  transform: translate(175%, -50%);
}

/* Squared Variation */
label:has(input[type=checkbox][role=switch].squared) {
  /* Add specific styles for squared variation */
  width: var(--switch-w);
  height: var(--switch-h);
  border-radius: 0;
  background-color: var(--foreground-secondary);
  position: relative;
}
label:has(input[type=checkbox][role=switch].squared)::after {
  content: "";
  background-color: var(--text);
  aspect-ratio: 1/1;
  height: 80%;
  position: absolute;
  top: 10%;
  left: 5%;
  border-radius: 0;
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}

/* Change Switch background when checked */
label:has(input[role=switch][type=checkbox].squared:checked) {
  background-color: var(--primary);
}
label:has(input[role=switch][type=checkbox].squared:checked)::after {
  transform: translateX(105%);
}

footer {
  --width: 100%;
  --height: 35vmin;
  color: color-mix(in oklab, var(--text-color) 90%, black 10%);
  align-self: flex-end;
  display: grid;
  place-items: center;
  width: var(--width);
  height: var(--height);
  border-top: 0.1rem solid var(--foreground-accent);
}
footer ul {
  display: flex;
  align-items: center;
  justify-content: center;
}
footer ul a {
  --txt: var(--secondary);
}

header {
  --widht: 100%;
  --height: 10vmin;
  min-width: var(--widht);
  height: var(--height);
  display: flex;
  align-items: center;
  justify-content: space-around;
  gap: var(--spacing);
  align-self: flex-start;
}
header a[role=img], header a:has(img.logo) {
  display: flex;
  align-items: center;
}
header a[role=img] :is(img, svg, em), header a:has(img.logo) :is(img, svg, em) {
  box-sizing: content-box;
  border: var(--primary) 0.4rem solid;
}

.hero {
  --bg-img-url: url(https://images.unsplash.com/photo-1528353518104-dbd48bee7bc4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1332&q=80);
  --bg-img-size: cover;
  --bg-img-repeat: no-repeat;
  --bg-img-pos: center;
  display: grid;
  place-items: center;
  align-content: center;
  width: var(--w-full);
  height: var(--h-screen);
  background-color: var(--background);
  background-image: var(--bg-img-url);
  background-size: var(--bg-img-size);
  background-repeat: var(--bg-img-repeat);
  background-position: var(--bg-img-pos);
  text-align: center;
}
.hero :is(h1, p) {
  --font-size: 11.44rem;
}
.hero h1 {
  font-size: var(--font-size);
  color: var(--accent);
}
.hero p {
  font-size: calc(var(--font-size) / 5);
}
main {
  --width: 90%;
  --height: auto;
  --spacing: var(--lg);
  --bg: inherit;
  width: clamp(60%, 75%, var(--width));
  height: var(--height);
  padding: var(--md) var(--lg);
  border-radius: var(--roundness);
  margin-block: var(--spacing);
  background-color: var(--bg);
}

nav {
  --font-size: 1.75rem;
  --bg: auto;
  background-color: var(--bg);
  width: clamp(30vmin, 40rem, 45%);
}
nav * {
  transition: opacity var(--transition);
}
nav ul {
  display: flex;
  align-items: center;
  justify-content: space-around;
  flex-wrap: wrap;
}
nav ul li {
  width: fit-content;
  height: fit-content;
}
nav ul li a {
  font-size: var(--font-size);
  font-weight: 600;
}
nav ul li:is(:hover, :focus) a {
  opacity: 0.8;
}
nav ul li:active {
  opacity: 0.6;
}

/*  --text: #e8e8ed;
 --background: #09090c;
 --primary: #47465d;
 --secondary: #16161d;
 --accent: #6f6e91; */
.row, .col {
  --spacing: var(--md);
  --spacing-y: var(--sm);
  --spacing-x: var(--md);
}

.row {
  display: flex;
  flex-direction: row;
  gap: var(--spacing);
}

.col {
  display: flex;
  flex-direction: column;
  gap: var(--spacing);
}

:where(.grid-dynamic, .grid-fixed) {
  --grid-cols: auto-fill;
  --grid-rows: min-content;
  --grid-item-width: 12rem;
  --grid-justify-items: center;
  --grid-min-cols: 1;
}

.grid-dynamic {
  display: grid;
  grid-template-columns: repeat(var(--grid-cols), minmax(var(--grid-item-width), 1fr));
  grid-auto-rows: var(--grid-rows);
  justify-content: space-between;
  justify-items: var(--grid-justify-items);
  place-content: var(--grid-justify-items);
  gap: var(--spacing);
  height: auto;
  width: 100%;
}
.grid-dynamic > * {
  --bg: var(--foreground-secondary);
  background-color: var(--bg);
  align-self: stretch;
  width: 100%;
}

.grid-fixed {
  --grid-cols: 2;
  --grid-rows: auto;
  display: grid;
  grid-template-columns: repeat(var(--grid-cols), minmax(var(--grid-item-width), 1fr));
  grid-template-rows: var(--grid-rows);
  justify-content: center;
  gap: var(--spacing);
}

:where(.wrapper) {
  width: auto;
  height: auto;
}

/* This code simulates a family hierarchy, where the father/parent shares his attributes across the family tree.
   It aims to be a more flexible way to work with inheritance. */
:where(.parent) {
  --bg: currentColor;
  --text-color: currentColor;
  --spacing: var(--md);
  --font-size: var(--font-size);
  background-color: var(--bg);
  /* All children, no matter the nesting level */
  /* All children, but only the direct ones */
  /* Only the first direct child */
  /* All the first children, no matter the nesting level */
  /* All the last children, no matter the nesting level */
  /* Only the last direct child */
  /* Odd children */
  /* Even children */
}
:where(.parent).colors {
  --bg: currentColor;
  --text-color: currentColor;
}
:where(.parent).sizes {
  --spacing: var(--spacing);
}
:where(.parent).font {
  --font-size: var(--font-size);
  --text-color: var(--text-color);
}
:where(.parent).all-childs *:not(.bastard) {
  background-color: inherit;
}
:where(.parent).direct-childs > *:not(.bastard) {
  background-color: inherit;
}
:where(.parent).first-child-only > :first-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).all-first-childs :first-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).all-last-childs :last-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).last-child-only > :last-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).odd-children > *:nth-child(odd):not(.bastard) {
  background-color: inherit;
}
:where(.parent).even-children > *:nth-child(even):not(.bastard) {
  background-color: inherit;
}

.text-align-center {
  text-align: center;
}

.text-align-left {
  text-align: left;
}

.text-align-right {
  text-align: right;
}

.text-align-justify {
  text-align: justify;
}

.text-align-end {
  text-align: end;
}

.text-align-start {
  text-align: start;
}

/*# sourceMappingURL=yonaka.temps.css.map */
